//
// Types for KeepKey Communication
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.16.0
// source: types.proto

package kkproto

import (
	proto "github.com/golang/protobuf/proto"
	descriptor "github.com/golang/protobuf/protoc-gen-go/descriptor"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

//*
// Type of failures returned by Failure message
// @used_in Failure
type FailureType int32

const (
	FailureType_Failure_UnexpectedMessage FailureType = 1
	FailureType_Failure_ButtonExpected    FailureType = 2
	FailureType_Failure_SyntaxError       FailureType = 3
	FailureType_Failure_ActionCancelled   FailureType = 4
	FailureType_Failure_PinExpected       FailureType = 5
	FailureType_Failure_PinCancelled      FailureType = 6
	FailureType_Failure_PinInvalid        FailureType = 7
	FailureType_Failure_InvalidSignature  FailureType = 8
	FailureType_Failure_Other             FailureType = 9
	FailureType_Failure_NotEnoughFunds    FailureType = 10
	FailureType_Failure_NotInitialized    FailureType = 11
	FailureType_Failure_PinMismatch       FailureType = 12
	FailureType_Failure_FirmwareError     FailureType = 99
)

// Enum value maps for FailureType.
var (
	FailureType_name = map[int32]string{
		1:  "Failure_UnexpectedMessage",
		2:  "Failure_ButtonExpected",
		3:  "Failure_SyntaxError",
		4:  "Failure_ActionCancelled",
		5:  "Failure_PinExpected",
		6:  "Failure_PinCancelled",
		7:  "Failure_PinInvalid",
		8:  "Failure_InvalidSignature",
		9:  "Failure_Other",
		10: "Failure_NotEnoughFunds",
		11: "Failure_NotInitialized",
		12: "Failure_PinMismatch",
		99: "Failure_FirmwareError",
	}
	FailureType_value = map[string]int32{
		"Failure_UnexpectedMessage": 1,
		"Failure_ButtonExpected":    2,
		"Failure_SyntaxError":       3,
		"Failure_ActionCancelled":   4,
		"Failure_PinExpected":       5,
		"Failure_PinCancelled":      6,
		"Failure_PinInvalid":        7,
		"Failure_InvalidSignature":  8,
		"Failure_Other":             9,
		"Failure_NotEnoughFunds":    10,
		"Failure_NotInitialized":    11,
		"Failure_PinMismatch":       12,
		"Failure_FirmwareError":     99,
	}
)

func (x FailureType) Enum() *FailureType {
	p := new(FailureType)
	*p = x
	return p
}

func (x FailureType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FailureType) Descriptor() protoreflect.EnumDescriptor {
	return file_types_proto_enumTypes[0].Descriptor()
}

func (FailureType) Type() protoreflect.EnumType {
	return &file_types_proto_enumTypes[0]
}

func (x FailureType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *FailureType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = FailureType(num)
	return nil
}

// Deprecated: Use FailureType.Descriptor instead.
func (FailureType) EnumDescriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{0}
}

//*
// Type of script which will be used for transaction output
// @used_in TxOutputType
type OutputScriptType int32

const (
	OutputScriptType_PAYTOADDRESS     OutputScriptType = 0 // used for all addresses (bitcoin, p2sh, witness)
	OutputScriptType_PAYTOSCRIPTHASH  OutputScriptType = 1 // p2sh address (deprecated; use PAYTOADDRESS)
	OutputScriptType_PAYTOMULTISIG    OutputScriptType = 2 // only for change output
	OutputScriptType_PAYTOOPRETURN    OutputScriptType = 3 // op_return
	OutputScriptType_PAYTOWITNESS     OutputScriptType = 4 // only for change output
	OutputScriptType_PAYTOP2SHWITNESS OutputScriptType = 5 // only for change output
)

// Enum value maps for OutputScriptType.
var (
	OutputScriptType_name = map[int32]string{
		0: "PAYTOADDRESS",
		1: "PAYTOSCRIPTHASH",
		2: "PAYTOMULTISIG",
		3: "PAYTOOPRETURN",
		4: "PAYTOWITNESS",
		5: "PAYTOP2SHWITNESS",
	}
	OutputScriptType_value = map[string]int32{
		"PAYTOADDRESS":     0,
		"PAYTOSCRIPTHASH":  1,
		"PAYTOMULTISIG":    2,
		"PAYTOOPRETURN":    3,
		"PAYTOWITNESS":     4,
		"PAYTOP2SHWITNESS": 5,
	}
)

func (x OutputScriptType) Enum() *OutputScriptType {
	p := new(OutputScriptType)
	*p = x
	return p
}

func (x OutputScriptType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OutputScriptType) Descriptor() protoreflect.EnumDescriptor {
	return file_types_proto_enumTypes[1].Descriptor()
}

func (OutputScriptType) Type() protoreflect.EnumType {
	return &file_types_proto_enumTypes[1]
}

func (x OutputScriptType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *OutputScriptType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = OutputScriptType(num)
	return nil
}

// Deprecated: Use OutputScriptType.Descriptor instead.
func (OutputScriptType) EnumDescriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{1}
}

//*
// Type of script which will be used for transaction output
// @used_in TxInputType
type InputScriptType int32

const (
	InputScriptType_SPENDADDRESS     InputScriptType = 0 // standard p2pkh address
	InputScriptType_SPENDMULTISIG    InputScriptType = 1 // p2sh multisig address
	InputScriptType_EXTERNAL         InputScriptType = 2 // reserved for external inputs (coinjoin)
	InputScriptType_SPENDWITNESS     InputScriptType = 3 // native segwit
	InputScriptType_SPENDP2SHWITNESS InputScriptType = 4 // segwit over p2sh (backward compatible)
)

// Enum value maps for InputScriptType.
var (
	InputScriptType_name = map[int32]string{
		0: "SPENDADDRESS",
		1: "SPENDMULTISIG",
		2: "EXTERNAL",
		3: "SPENDWITNESS",
		4: "SPENDP2SHWITNESS",
	}
	InputScriptType_value = map[string]int32{
		"SPENDADDRESS":     0,
		"SPENDMULTISIG":    1,
		"EXTERNAL":         2,
		"SPENDWITNESS":     3,
		"SPENDP2SHWITNESS": 4,
	}
)

func (x InputScriptType) Enum() *InputScriptType {
	p := new(InputScriptType)
	*p = x
	return p
}

func (x InputScriptType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InputScriptType) Descriptor() protoreflect.EnumDescriptor {
	return file_types_proto_enumTypes[2].Descriptor()
}

func (InputScriptType) Type() protoreflect.EnumType {
	return &file_types_proto_enumTypes[2]
}

func (x InputScriptType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *InputScriptType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = InputScriptType(num)
	return nil
}

// Deprecated: Use InputScriptType.Descriptor instead.
func (InputScriptType) EnumDescriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{2}
}

//*
// Type of information required by transaction signing process
// @used_in TxRequest
type RequestType int32

const (
	RequestType_TXINPUT     RequestType = 0
	RequestType_TXOUTPUT    RequestType = 1
	RequestType_TXMETA      RequestType = 2
	RequestType_TXFINISHED  RequestType = 3
	RequestType_TXEXTRADATA RequestType = 4
)

// Enum value maps for RequestType.
var (
	RequestType_name = map[int32]string{
		0: "TXINPUT",
		1: "TXOUTPUT",
		2: "TXMETA",
		3: "TXFINISHED",
		4: "TXEXTRADATA",
	}
	RequestType_value = map[string]int32{
		"TXINPUT":     0,
		"TXOUTPUT":    1,
		"TXMETA":      2,
		"TXFINISHED":  3,
		"TXEXTRADATA": 4,
	}
)

func (x RequestType) Enum() *RequestType {
	p := new(RequestType)
	*p = x
	return p
}

func (x RequestType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RequestType) Descriptor() protoreflect.EnumDescriptor {
	return file_types_proto_enumTypes[3].Descriptor()
}

func (RequestType) Type() protoreflect.EnumType {
	return &file_types_proto_enumTypes[3]
}

func (x RequestType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *RequestType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = RequestType(num)
	return nil
}

// Deprecated: Use RequestType.Descriptor instead.
func (RequestType) EnumDescriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{3}
}

//*
// Type of ouput address specify in transaction
// @used_in TxOutputType
type OutputAddressType int32

const (
	OutputAddressType_SPEND    OutputAddressType = 0
	OutputAddressType_TRANSFER OutputAddressType = 1
	OutputAddressType_CHANGE   OutputAddressType = 2
	OutputAddressType_EXCHANGE OutputAddressType = 3
)

// Enum value maps for OutputAddressType.
var (
	OutputAddressType_name = map[int32]string{
		0: "SPEND",
		1: "TRANSFER",
		2: "CHANGE",
		3: "EXCHANGE",
	}
	OutputAddressType_value = map[string]int32{
		"SPEND":    0,
		"TRANSFER": 1,
		"CHANGE":   2,
		"EXCHANGE": 3,
	}
)

func (x OutputAddressType) Enum() *OutputAddressType {
	p := new(OutputAddressType)
	*p = x
	return p
}

func (x OutputAddressType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OutputAddressType) Descriptor() protoreflect.EnumDescriptor {
	return file_types_proto_enumTypes[4].Descriptor()
}

func (OutputAddressType) Type() protoreflect.EnumType {
	return &file_types_proto_enumTypes[4]
}

func (x OutputAddressType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *OutputAddressType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = OutputAddressType(num)
	return nil
}

// Deprecated: Use OutputAddressType.Descriptor instead.
func (OutputAddressType) EnumDescriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{4}
}

//*
// Type of button request
// @used_in ButtonRequest
type ButtonRequestType int32

const (
	ButtonRequestType_ButtonRequest_Other                     ButtonRequestType = 1
	ButtonRequestType_ButtonRequest_FeeOverThreshold          ButtonRequestType = 2
	ButtonRequestType_ButtonRequest_ConfirmOutput             ButtonRequestType = 3
	ButtonRequestType_ButtonRequest_ResetDevice               ButtonRequestType = 4
	ButtonRequestType_ButtonRequest_ConfirmWord               ButtonRequestType = 5
	ButtonRequestType_ButtonRequest_WipeDevice                ButtonRequestType = 6
	ButtonRequestType_ButtonRequest_ProtectCall               ButtonRequestType = 7
	ButtonRequestType_ButtonRequest_SignTx                    ButtonRequestType = 8
	ButtonRequestType_ButtonRequest_FirmwareCheck             ButtonRequestType = 9
	ButtonRequestType_ButtonRequest_Address                   ButtonRequestType = 10
	ButtonRequestType_ButtonRequest_FirmwareErase             ButtonRequestType = 11
	ButtonRequestType_ButtonRequest_ConfirmTransferToAccount  ButtonRequestType = 12
	ButtonRequestType_ButtonRequest_ConfirmTransferToNodePath ButtonRequestType = 13 // Deprecated!
	ButtonRequestType_ButtonRequest_ChangeLabel               ButtonRequestType = 14
	ButtonRequestType_ButtonRequest_ChangeLanguage            ButtonRequestType = 15
	ButtonRequestType_ButtonRequest_EnablePassphrase          ButtonRequestType = 16
	ButtonRequestType_ButtonRequest_DisablePassphrase         ButtonRequestType = 17
	ButtonRequestType_ButtonRequest_EncryptAndSignMessage     ButtonRequestType = 18
	ButtonRequestType_ButtonRequest_EncryptMessage            ButtonRequestType = 19
	ButtonRequestType_ButtonRequest_ImportPrivateKey          ButtonRequestType = 20
	ButtonRequestType_ButtonRequest_ImportRecoverySentence    ButtonRequestType = 21
	ButtonRequestType_ButtonRequest_SignIdentity              ButtonRequestType = 22
	ButtonRequestType_ButtonRequest_Ping                      ButtonRequestType = 23
	ButtonRequestType_ButtonRequest_RemovePin                 ButtonRequestType = 24
	ButtonRequestType_ButtonRequest_ChangePin                 ButtonRequestType = 25
	ButtonRequestType_ButtonRequest_CreatePin                 ButtonRequestType = 26
	ButtonRequestType_ButtonRequest_GetEntropy                ButtonRequestType = 27
	ButtonRequestType_ButtonRequest_SignMessage               ButtonRequestType = 28
	ButtonRequestType_ButtonRequest_ApplyPolicies             ButtonRequestType = 29
	ButtonRequestType_ButtonRequest_SignExchange              ButtonRequestType = 30
	ButtonRequestType_ButtonRequest_AutoLockDelayMs           ButtonRequestType = 31
	ButtonRequestType_ButtonRequest_U2FCounter                ButtonRequestType = 32
	ButtonRequestType_ButtonRequest_ConfirmEosAction          ButtonRequestType = 33
	ButtonRequestType_ButtonRequest_ConfirmEosBudget          ButtonRequestType = 34
	ButtonRequestType_ButtonRequest_ConfirmMemo               ButtonRequestType = 35
	ButtonRequestType_ButtonRequest_RemoveWipeCode            ButtonRequestType = 36
	ButtonRequestType_ButtonRequest_ChangeWipeCode            ButtonRequestType = 37
	ButtonRequestType_ButtonRequest_CreateWipeCode            ButtonRequestType = 38
)

// Enum value maps for ButtonRequestType.
var (
	ButtonRequestType_name = map[int32]string{
		1:  "ButtonRequest_Other",
		2:  "ButtonRequest_FeeOverThreshold",
		3:  "ButtonRequest_ConfirmOutput",
		4:  "ButtonRequest_ResetDevice",
		5:  "ButtonRequest_ConfirmWord",
		6:  "ButtonRequest_WipeDevice",
		7:  "ButtonRequest_ProtectCall",
		8:  "ButtonRequest_SignTx",
		9:  "ButtonRequest_FirmwareCheck",
		10: "ButtonRequest_Address",
		11: "ButtonRequest_FirmwareErase",
		12: "ButtonRequest_ConfirmTransferToAccount",
		13: "ButtonRequest_ConfirmTransferToNodePath",
		14: "ButtonRequest_ChangeLabel",
		15: "ButtonRequest_ChangeLanguage",
		16: "ButtonRequest_EnablePassphrase",
		17: "ButtonRequest_DisablePassphrase",
		18: "ButtonRequest_EncryptAndSignMessage",
		19: "ButtonRequest_EncryptMessage",
		20: "ButtonRequest_ImportPrivateKey",
		21: "ButtonRequest_ImportRecoverySentence",
		22: "ButtonRequest_SignIdentity",
		23: "ButtonRequest_Ping",
		24: "ButtonRequest_RemovePin",
		25: "ButtonRequest_ChangePin",
		26: "ButtonRequest_CreatePin",
		27: "ButtonRequest_GetEntropy",
		28: "ButtonRequest_SignMessage",
		29: "ButtonRequest_ApplyPolicies",
		30: "ButtonRequest_SignExchange",
		31: "ButtonRequest_AutoLockDelayMs",
		32: "ButtonRequest_U2FCounter",
		33: "ButtonRequest_ConfirmEosAction",
		34: "ButtonRequest_ConfirmEosBudget",
		35: "ButtonRequest_ConfirmMemo",
		36: "ButtonRequest_RemoveWipeCode",
		37: "ButtonRequest_ChangeWipeCode",
		38: "ButtonRequest_CreateWipeCode",
	}
	ButtonRequestType_value = map[string]int32{
		"ButtonRequest_Other":                     1,
		"ButtonRequest_FeeOverThreshold":          2,
		"ButtonRequest_ConfirmOutput":             3,
		"ButtonRequest_ResetDevice":               4,
		"ButtonRequest_ConfirmWord":               5,
		"ButtonRequest_WipeDevice":                6,
		"ButtonRequest_ProtectCall":               7,
		"ButtonRequest_SignTx":                    8,
		"ButtonRequest_FirmwareCheck":             9,
		"ButtonRequest_Address":                   10,
		"ButtonRequest_FirmwareErase":             11,
		"ButtonRequest_ConfirmTransferToAccount":  12,
		"ButtonRequest_ConfirmTransferToNodePath": 13,
		"ButtonRequest_ChangeLabel":               14,
		"ButtonRequest_ChangeLanguage":            15,
		"ButtonRequest_EnablePassphrase":          16,
		"ButtonRequest_DisablePassphrase":         17,
		"ButtonRequest_EncryptAndSignMessage":     18,
		"ButtonRequest_EncryptMessage":            19,
		"ButtonRequest_ImportPrivateKey":          20,
		"ButtonRequest_ImportRecoverySentence":    21,
		"ButtonRequest_SignIdentity":              22,
		"ButtonRequest_Ping":                      23,
		"ButtonRequest_RemovePin":                 24,
		"ButtonRequest_ChangePin":                 25,
		"ButtonRequest_CreatePin":                 26,
		"ButtonRequest_GetEntropy":                27,
		"ButtonRequest_SignMessage":               28,
		"ButtonRequest_ApplyPolicies":             29,
		"ButtonRequest_SignExchange":              30,
		"ButtonRequest_AutoLockDelayMs":           31,
		"ButtonRequest_U2FCounter":                32,
		"ButtonRequest_ConfirmEosAction":          33,
		"ButtonRequest_ConfirmEosBudget":          34,
		"ButtonRequest_ConfirmMemo":               35,
		"ButtonRequest_RemoveWipeCode":            36,
		"ButtonRequest_ChangeWipeCode":            37,
		"ButtonRequest_CreateWipeCode":            38,
	}
)

func (x ButtonRequestType) Enum() *ButtonRequestType {
	p := new(ButtonRequestType)
	*p = x
	return p
}

func (x ButtonRequestType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ButtonRequestType) Descriptor() protoreflect.EnumDescriptor {
	return file_types_proto_enumTypes[5].Descriptor()
}

func (ButtonRequestType) Type() protoreflect.EnumType {
	return &file_types_proto_enumTypes[5]
}

func (x ButtonRequestType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ButtonRequestType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ButtonRequestType(num)
	return nil
}

// Deprecated: Use ButtonRequestType.Descriptor instead.
func (ButtonRequestType) EnumDescriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{5}
}

//*
// Type of PIN request
// @used_in PinMatrixRequest
type PinMatrixRequestType int32

const (
	PinMatrixRequestType_PinMatrixRequestType_Current   PinMatrixRequestType = 1
	PinMatrixRequestType_PinMatrixRequestType_NewFirst  PinMatrixRequestType = 2
	PinMatrixRequestType_PinMatrixRequestType_NewSecond PinMatrixRequestType = 3
)

// Enum value maps for PinMatrixRequestType.
var (
	PinMatrixRequestType_name = map[int32]string{
		1: "PinMatrixRequestType_Current",
		2: "PinMatrixRequestType_NewFirst",
		3: "PinMatrixRequestType_NewSecond",
	}
	PinMatrixRequestType_value = map[string]int32{
		"PinMatrixRequestType_Current":   1,
		"PinMatrixRequestType_NewFirst":  2,
		"PinMatrixRequestType_NewSecond": 3,
	}
)

func (x PinMatrixRequestType) Enum() *PinMatrixRequestType {
	p := new(PinMatrixRequestType)
	*p = x
	return p
}

func (x PinMatrixRequestType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PinMatrixRequestType) Descriptor() protoreflect.EnumDescriptor {
	return file_types_proto_enumTypes[6].Descriptor()
}

func (PinMatrixRequestType) Type() protoreflect.EnumType {
	return &file_types_proto_enumTypes[6]
}

func (x PinMatrixRequestType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PinMatrixRequestType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PinMatrixRequestType(num)
	return nil
}

// Deprecated: Use PinMatrixRequestType.Descriptor instead.
func (PinMatrixRequestType) EnumDescriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{6}
}

//*
// Structure representing BIP32 (hierarchical deterministic) node
// Used for imports of private key into the device and exporting public key out of device
// @used_in PublicKey
// @used_in LoadDevice
// @used_in DebugLinkState
// @used_in Storage
type HDNodeType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Depth       *uint32 `protobuf:"varint,1,req,name=depth" json:"depth,omitempty"`
	Fingerprint *uint32 `protobuf:"varint,2,req,name=fingerprint" json:"fingerprint,omitempty"`
	ChildNum    *uint32 `protobuf:"varint,3,req,name=child_num,json=childNum" json:"child_num,omitempty"`
	ChainCode   []byte  `protobuf:"bytes,4,req,name=chain_code,json=chainCode" json:"chain_code,omitempty"`
	PrivateKey  []byte  `protobuf:"bytes,5,opt,name=private_key,json=privateKey" json:"private_key,omitempty"`
	PublicKey   []byte  `protobuf:"bytes,6,opt,name=public_key,json=publicKey" json:"public_key,omitempty"`
}

func (x *HDNodeType) Reset() {
	*x = HDNodeType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HDNodeType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HDNodeType) ProtoMessage() {}

func (x *HDNodeType) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HDNodeType.ProtoReflect.Descriptor instead.
func (*HDNodeType) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{0}
}

func (x *HDNodeType) GetDepth() uint32 {
	if x != nil && x.Depth != nil {
		return *x.Depth
	}
	return 0
}

func (x *HDNodeType) GetFingerprint() uint32 {
	if x != nil && x.Fingerprint != nil {
		return *x.Fingerprint
	}
	return 0
}

func (x *HDNodeType) GetChildNum() uint32 {
	if x != nil && x.ChildNum != nil {
		return *x.ChildNum
	}
	return 0
}

func (x *HDNodeType) GetChainCode() []byte {
	if x != nil {
		return x.ChainCode
	}
	return nil
}

func (x *HDNodeType) GetPrivateKey() []byte {
	if x != nil {
		return x.PrivateKey
	}
	return nil
}

func (x *HDNodeType) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

type HDNodePathType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node     *HDNodeType `protobuf:"bytes,1,req,name=node" json:"node,omitempty"`                          // BIP-32 node in deserialized form
	AddressN []uint32    `protobuf:"varint,2,rep,name=address_n,json=addressN" json:"address_n,omitempty"` // BIP-32 path to derive the key from node
}

func (x *HDNodePathType) Reset() {
	*x = HDNodePathType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HDNodePathType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HDNodePathType) ProtoMessage() {}

func (x *HDNodePathType) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HDNodePathType.ProtoReflect.Descriptor instead.
func (*HDNodePathType) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{1}
}

func (x *HDNodePathType) GetNode() *HDNodeType {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *HDNodePathType) GetAddressN() []uint32 {
	if x != nil {
		return x.AddressN
	}
	return nil
}

//*
// Structure representing Coin
// @used_in Features
type CoinType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoinName        *string `protobuf:"bytes,1,opt,name=coin_name,json=coinName" json:"coin_name,omitempty"`
	CoinShortcut    *string `protobuf:"bytes,2,opt,name=coin_shortcut,json=coinShortcut" json:"coin_shortcut,omitempty"`
	AddressType     *uint32 `protobuf:"varint,3,opt,name=address_type,json=addressType,def=0" json:"address_type,omitempty"`
	MaxfeeKb        *uint64 `protobuf:"varint,4,opt,name=maxfee_kb,json=maxfeeKb" json:"maxfee_kb,omitempty"`
	AddressTypeP2Sh *uint32 `protobuf:"varint,5,opt,name=address_type_p2sh,json=addressTypeP2sh,def=5" json:"address_type_p2sh,omitempty"`
	//optional uint32 address_type_p2wpkh = 6 [default=6]; REMOVED
	//optional uint32 address_type_p2wsh = 7 [default=10]; REMOVED
	SignedMessageHeader *string `protobuf:"bytes,8,opt,name=signed_message_header,json=signedMessageHeader" json:"signed_message_header,omitempty"`
	Bip44AccountPath    *uint32 `protobuf:"varint,9,opt,name=bip44_account_path,json=bip44AccountPath" json:"bip44_account_path,omitempty"`
	Forkid              *uint32 `protobuf:"varint,12,opt,name=forkid" json:"forkid,omitempty"`
	Decimals            *uint32 `protobuf:"varint,13,opt,name=decimals" json:"decimals,omitempty"`
	ContractAddress     []byte  `protobuf:"bytes,14,opt,name=contract_address,json=contractAddress" json:"contract_address,omitempty"`
	//optional bytes gas_limit = 15; REMOVED
	XpubMagic *uint32 `protobuf:"varint,16,opt,name=xpub_magic,json=xpubMagic,def=76067358" json:"xpub_magic,omitempty"`
	//optional uint32 xprv_magic = 17 [default=76066276]; REMOVED
	Segwit         *bool   `protobuf:"varint,18,opt,name=segwit" json:"segwit,omitempty"`
	ForceBip143    *bool   `protobuf:"varint,19,opt,name=force_bip143,json=forceBip143" json:"force_bip143,omitempty"`
	CurveName      *string `protobuf:"bytes,20,opt,name=curve_name,json=curveName" json:"curve_name,omitempty"`
	CashaddrPrefix *string `protobuf:"bytes,21,opt,name=cashaddr_prefix,json=cashaddrPrefix" json:"cashaddr_prefix,omitempty"`
	Bech32Prefix   *string `protobuf:"bytes,22,opt,name=bech32_prefix,json=bech32Prefix" json:"bech32_prefix,omitempty"`
	Decred         *bool   `protobuf:"varint,23,opt,name=decred" json:"decred,omitempty"`
	// optional uint32 version_group_id = 24; REMOVED
	XpubMagicSegwitP2Sh   *uint32 `protobuf:"varint,25,opt,name=xpub_magic_segwit_p2sh,json=xpubMagicSegwitP2sh" json:"xpub_magic_segwit_p2sh,omitempty"`
	XpubMagicSegwitNative *uint32 `protobuf:"varint,26,opt,name=xpub_magic_segwit_native,json=xpubMagicSegwitNative" json:"xpub_magic_segwit_native,omitempty"`
	NanoaddrPrefix        *string `protobuf:"bytes,27,opt,name=nanoaddr_prefix,json=nanoaddrPrefix" json:"nanoaddr_prefix,omitempty"`
}

// Default values for CoinType fields.
const (
	Default_CoinType_AddressType     = uint32(0)
	Default_CoinType_AddressTypeP2Sh = uint32(5)
	Default_CoinType_XpubMagic       = uint32(76067358)
)

func (x *CoinType) Reset() {
	*x = CoinType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoinType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoinType) ProtoMessage() {}

func (x *CoinType) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoinType.ProtoReflect.Descriptor instead.
func (*CoinType) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{2}
}

func (x *CoinType) GetCoinName() string {
	if x != nil && x.CoinName != nil {
		return *x.CoinName
	}
	return ""
}

func (x *CoinType) GetCoinShortcut() string {
	if x != nil && x.CoinShortcut != nil {
		return *x.CoinShortcut
	}
	return ""
}

func (x *CoinType) GetAddressType() uint32 {
	if x != nil && x.AddressType != nil {
		return *x.AddressType
	}
	return Default_CoinType_AddressType
}

func (x *CoinType) GetMaxfeeKb() uint64 {
	if x != nil && x.MaxfeeKb != nil {
		return *x.MaxfeeKb
	}
	return 0
}

func (x *CoinType) GetAddressTypeP2Sh() uint32 {
	if x != nil && x.AddressTypeP2Sh != nil {
		return *x.AddressTypeP2Sh
	}
	return Default_CoinType_AddressTypeP2Sh
}

func (x *CoinType) GetSignedMessageHeader() string {
	if x != nil && x.SignedMessageHeader != nil {
		return *x.SignedMessageHeader
	}
	return ""
}

func (x *CoinType) GetBip44AccountPath() uint32 {
	if x != nil && x.Bip44AccountPath != nil {
		return *x.Bip44AccountPath
	}
	return 0
}

func (x *CoinType) GetForkid() uint32 {
	if x != nil && x.Forkid != nil {
		return *x.Forkid
	}
	return 0
}

func (x *CoinType) GetDecimals() uint32 {
	if x != nil && x.Decimals != nil {
		return *x.Decimals
	}
	return 0
}

func (x *CoinType) GetContractAddress() []byte {
	if x != nil {
		return x.ContractAddress
	}
	return nil
}

func (x *CoinType) GetXpubMagic() uint32 {
	if x != nil && x.XpubMagic != nil {
		return *x.XpubMagic
	}
	return Default_CoinType_XpubMagic
}

func (x *CoinType) GetSegwit() bool {
	if x != nil && x.Segwit != nil {
		return *x.Segwit
	}
	return false
}

func (x *CoinType) GetForceBip143() bool {
	if x != nil && x.ForceBip143 != nil {
		return *x.ForceBip143
	}
	return false
}

func (x *CoinType) GetCurveName() string {
	if x != nil && x.CurveName != nil {
		return *x.CurveName
	}
	return ""
}

func (x *CoinType) GetCashaddrPrefix() string {
	if x != nil && x.CashaddrPrefix != nil {
		return *x.CashaddrPrefix
	}
	return ""
}

func (x *CoinType) GetBech32Prefix() string {
	if x != nil && x.Bech32Prefix != nil {
		return *x.Bech32Prefix
	}
	return ""
}

func (x *CoinType) GetDecred() bool {
	if x != nil && x.Decred != nil {
		return *x.Decred
	}
	return false
}

func (x *CoinType) GetXpubMagicSegwitP2Sh() uint32 {
	if x != nil && x.XpubMagicSegwitP2Sh != nil {
		return *x.XpubMagicSegwitP2Sh
	}
	return 0
}

func (x *CoinType) GetXpubMagicSegwitNative() uint32 {
	if x != nil && x.XpubMagicSegwitNative != nil {
		return *x.XpubMagicSegwitNative
	}
	return 0
}

func (x *CoinType) GetNanoaddrPrefix() string {
	if x != nil && x.NanoaddrPrefix != nil {
		return *x.NanoaddrPrefix
	}
	return ""
}

//*
// Type of redeem script used in input
// @used_in TxInputType
type MultisigRedeemScriptType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pubkeys    []*HDNodePathType `protobuf:"bytes,1,rep,name=pubkeys" json:"pubkeys,omitempty"`       // pubkeys from multisig address (sorted lexicographically)
	Signatures [][]byte          `protobuf:"bytes,2,rep,name=signatures" json:"signatures,omitempty"` // existing signatures for partially signed input
	M          *uint32           `protobuf:"varint,3,opt,name=m" json:"m,omitempty"`                  // "m" from n, how many valid signatures is necessary for spending
}

func (x *MultisigRedeemScriptType) Reset() {
	*x = MultisigRedeemScriptType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultisigRedeemScriptType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultisigRedeemScriptType) ProtoMessage() {}

func (x *MultisigRedeemScriptType) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultisigRedeemScriptType.ProtoReflect.Descriptor instead.
func (*MultisigRedeemScriptType) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{3}
}

func (x *MultisigRedeemScriptType) GetPubkeys() []*HDNodePathType {
	if x != nil {
		return x.Pubkeys
	}
	return nil
}

func (x *MultisigRedeemScriptType) GetSignatures() [][]byte {
	if x != nil {
		return x.Signatures
	}
	return nil
}

func (x *MultisigRedeemScriptType) GetM() uint32 {
	if x != nil && x.M != nil {
		return *x.M
	}
	return 0
}

//*
// Structure representing transaction input
// @used_in TransactionType
type TxInputType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddressN            []uint32                  `protobuf:"varint,1,rep,name=address_n,json=addressN" json:"address_n,omitempty"`                                  // BIP-32 path to derive the key from master node
	PrevHash            []byte                    `protobuf:"bytes,2,req,name=prev_hash,json=prevHash" json:"prev_hash,omitempty"`                                   // hash of previous transaction output to spend by this input
	PrevIndex           *uint32                   `protobuf:"varint,3,req,name=prev_index,json=prevIndex" json:"prev_index,omitempty"`                               // index of previous output to spend
	ScriptSig           []byte                    `protobuf:"bytes,4,opt,name=script_sig,json=scriptSig" json:"script_sig,omitempty"`                                // script signature, unset for tx to sign
	Sequence            *uint32                   `protobuf:"varint,5,opt,name=sequence,def=4294967295" json:"sequence,omitempty"`                                   // sequence
	ScriptType          *InputScriptType          `protobuf:"varint,6,opt,name=script_type,json=scriptType,enum=InputScriptType,def=0" json:"script_type,omitempty"` // defines template of input script
	Multisig            *MultisigRedeemScriptType `protobuf:"bytes,7,opt,name=multisig" json:"multisig,omitempty"`                                                   // Filled if input is going to spend multisig tx
	Amount              *uint64                   `protobuf:"varint,8,opt,name=amount" json:"amount,omitempty"`                                                      // amount of previous transaction output (for segwit only)
	DecredTree          *uint32                   `protobuf:"varint,9,opt,name=decred_tree,json=decredTree" json:"decred_tree,omitempty"`
	DecredScriptVersion *uint32                   `protobuf:"varint,10,opt,name=decred_script_version,json=decredScriptVersion" json:"decred_script_version,omitempty"`
}

// Default values for TxInputType fields.
const (
	Default_TxInputType_Sequence   = uint32(4294967295)
	Default_TxInputType_ScriptType = InputScriptType_SPENDADDRESS
)

func (x *TxInputType) Reset() {
	*x = TxInputType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxInputType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxInputType) ProtoMessage() {}

func (x *TxInputType) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxInputType.ProtoReflect.Descriptor instead.
func (*TxInputType) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{4}
}

func (x *TxInputType) GetAddressN() []uint32 {
	if x != nil {
		return x.AddressN
	}
	return nil
}

func (x *TxInputType) GetPrevHash() []byte {
	if x != nil {
		return x.PrevHash
	}
	return nil
}

func (x *TxInputType) GetPrevIndex() uint32 {
	if x != nil && x.PrevIndex != nil {
		return *x.PrevIndex
	}
	return 0
}

func (x *TxInputType) GetScriptSig() []byte {
	if x != nil {
		return x.ScriptSig
	}
	return nil
}

func (x *TxInputType) GetSequence() uint32 {
	if x != nil && x.Sequence != nil {
		return *x.Sequence
	}
	return Default_TxInputType_Sequence
}

func (x *TxInputType) GetScriptType() InputScriptType {
	if x != nil && x.ScriptType != nil {
		return *x.ScriptType
	}
	return Default_TxInputType_ScriptType
}

func (x *TxInputType) GetMultisig() *MultisigRedeemScriptType {
	if x != nil {
		return x.Multisig
	}
	return nil
}

func (x *TxInputType) GetAmount() uint64 {
	if x != nil && x.Amount != nil {
		return *x.Amount
	}
	return 0
}

func (x *TxInputType) GetDecredTree() uint32 {
	if x != nil && x.DecredTree != nil {
		return *x.DecredTree
	}
	return 0
}

func (x *TxInputType) GetDecredScriptVersion() uint32 {
	if x != nil && x.DecredScriptVersion != nil {
		return *x.DecredScriptVersion
	}
	return 0
}

//*
// Structure representing transaction output
// @used_in TransactionType
type TxOutputType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address             *string                   `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`                                                    // target coin address in Base58 encoding
	AddressN            []uint32                  `protobuf:"varint,2,rep,name=address_n,json=addressN" json:"address_n,omitempty"`                                 // BIP-32 path to derive the key from master node; has higher priority than "address"
	Amount              *uint64                   `protobuf:"varint,3,req,name=amount" json:"amount,omitempty"`                                                     // amount to spend in satoshis
	ScriptType          *OutputScriptType         `protobuf:"varint,4,req,name=script_type,json=scriptType,enum=OutputScriptType" json:"script_type,omitempty"`     // output script type
	Multisig            *MultisigRedeemScriptType `protobuf:"bytes,5,opt,name=multisig" json:"multisig,omitempty"`                                                  // defines multisig address; script_type must be PAYTOMULTISIG
	OpReturnData        []byte                    `protobuf:"bytes,6,opt,name=op_return_data,json=opReturnData" json:"op_return_data,omitempty"`                    // defines op_return data; script_type must be PAYTOOPRETURN, amount must be 0
	AddressType         *OutputAddressType        `protobuf:"varint,7,opt,name=address_type,json=addressType,enum=OutputAddressType" json:"address_type,omitempty"` // output address type
	ExchangeType        *ExchangeType             `protobuf:"bytes,8,opt,name=exchange_type,json=exchangeType" json:"exchange_type,omitempty"`                      // exchange type data
	DecredScriptVersion *uint32                   `protobuf:"varint,9,opt,name=decred_script_version,json=decredScriptVersion" json:"decred_script_version,omitempty"`
}

func (x *TxOutputType) Reset() {
	*x = TxOutputType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxOutputType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxOutputType) ProtoMessage() {}

func (x *TxOutputType) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxOutputType.ProtoReflect.Descriptor instead.
func (*TxOutputType) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{5}
}

func (x *TxOutputType) GetAddress() string {
	if x != nil && x.Address != nil {
		return *x.Address
	}
	return ""
}

func (x *TxOutputType) GetAddressN() []uint32 {
	if x != nil {
		return x.AddressN
	}
	return nil
}

func (x *TxOutputType) GetAmount() uint64 {
	if x != nil && x.Amount != nil {
		return *x.Amount
	}
	return 0
}

func (x *TxOutputType) GetScriptType() OutputScriptType {
	if x != nil && x.ScriptType != nil {
		return *x.ScriptType
	}
	return OutputScriptType_PAYTOADDRESS
}

func (x *TxOutputType) GetMultisig() *MultisigRedeemScriptType {
	if x != nil {
		return x.Multisig
	}
	return nil
}

func (x *TxOutputType) GetOpReturnData() []byte {
	if x != nil {
		return x.OpReturnData
	}
	return nil
}

func (x *TxOutputType) GetAddressType() OutputAddressType {
	if x != nil && x.AddressType != nil {
		return *x.AddressType
	}
	return OutputAddressType_SPEND
}

func (x *TxOutputType) GetExchangeType() *ExchangeType {
	if x != nil {
		return x.ExchangeType
	}
	return nil
}

func (x *TxOutputType) GetDecredScriptVersion() uint32 {
	if x != nil && x.DecredScriptVersion != nil {
		return *x.DecredScriptVersion
	}
	return 0
}

//*
// Structure representing compiled transaction output
// @used_in TransactionType
type TxOutputBinType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount              *uint64 `protobuf:"varint,1,req,name=amount" json:"amount,omitempty"`
	ScriptPubkey        []byte  `protobuf:"bytes,2,req,name=script_pubkey,json=scriptPubkey" json:"script_pubkey,omitempty"`
	DecredScriptVersion *uint32 `protobuf:"varint,3,opt,name=decred_script_version,json=decredScriptVersion" json:"decred_script_version,omitempty"`
}

func (x *TxOutputBinType) Reset() {
	*x = TxOutputBinType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxOutputBinType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxOutputBinType) ProtoMessage() {}

func (x *TxOutputBinType) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxOutputBinType.ProtoReflect.Descriptor instead.
func (*TxOutputBinType) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{6}
}

func (x *TxOutputBinType) GetAmount() uint64 {
	if x != nil && x.Amount != nil {
		return *x.Amount
	}
	return 0
}

func (x *TxOutputBinType) GetScriptPubkey() []byte {
	if x != nil {
		return x.ScriptPubkey
	}
	return nil
}

func (x *TxOutputBinType) GetDecredScriptVersion() uint32 {
	if x != nil && x.DecredScriptVersion != nil {
		return *x.DecredScriptVersion
	}
	return 0
}

//*
// Structure representing transaction
type TransactionType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version        *uint32            `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Inputs         []*TxInputType     `protobuf:"bytes,2,rep,name=inputs" json:"inputs,omitempty"`
	BinOutputs     []*TxOutputBinType `protobuf:"bytes,3,rep,name=bin_outputs,json=binOutputs" json:"bin_outputs,omitempty"`
	Outputs        []*TxOutputType    `protobuf:"bytes,5,rep,name=outputs" json:"outputs,omitempty"`
	LockTime       *uint32            `protobuf:"varint,4,opt,name=lock_time,json=lockTime" json:"lock_time,omitempty"`
	InputsCnt      *uint32            `protobuf:"varint,6,opt,name=inputs_cnt,json=inputsCnt" json:"inputs_cnt,omitempty"`
	OutputsCnt     *uint32            `protobuf:"varint,7,opt,name=outputs_cnt,json=outputsCnt" json:"outputs_cnt,omitempty"`
	ExtraData      []byte             `protobuf:"bytes,8,opt,name=extra_data,json=extraData" json:"extra_data,omitempty"`                    // only for Zcash
	ExtraDataLen   *uint32            `protobuf:"varint,9,opt,name=extra_data_len,json=extraDataLen" json:"extra_data_len,omitempty"`        // only for Zcash
	Expiry         *uint32            `protobuf:"varint,10,opt,name=expiry" json:"expiry,omitempty"`                                         // only for Decred, and Zcash
	Overwintered   *bool              `protobuf:"varint,11,opt,name=overwintered" json:"overwintered,omitempty"`                             // only for Zcash
	VersionGroupId *uint32            `protobuf:"varint,12,opt,name=version_group_id,json=versionGroupId" json:"version_group_id,omitempty"` // only for Zcash, nVersionGroupId when overwintered is set
	BranchId       *uint32            `protobuf:"varint,13,opt,name=branch_id,json=branchId" json:"branch_id,omitempty"`                     // only for Zcash, BRANCH_ID when overwintered is set
}

func (x *TransactionType) Reset() {
	*x = TransactionType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionType) ProtoMessage() {}

func (x *TransactionType) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionType.ProtoReflect.Descriptor instead.
func (*TransactionType) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{7}
}

func (x *TransactionType) GetVersion() uint32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *TransactionType) GetInputs() []*TxInputType {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *TransactionType) GetBinOutputs() []*TxOutputBinType {
	if x != nil {
		return x.BinOutputs
	}
	return nil
}

func (x *TransactionType) GetOutputs() []*TxOutputType {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *TransactionType) GetLockTime() uint32 {
	if x != nil && x.LockTime != nil {
		return *x.LockTime
	}
	return 0
}

func (x *TransactionType) GetInputsCnt() uint32 {
	if x != nil && x.InputsCnt != nil {
		return *x.InputsCnt
	}
	return 0
}

func (x *TransactionType) GetOutputsCnt() uint32 {
	if x != nil && x.OutputsCnt != nil {
		return *x.OutputsCnt
	}
	return 0
}

func (x *TransactionType) GetExtraData() []byte {
	if x != nil {
		return x.ExtraData
	}
	return nil
}

func (x *TransactionType) GetExtraDataLen() uint32 {
	if x != nil && x.ExtraDataLen != nil {
		return *x.ExtraDataLen
	}
	return 0
}

func (x *TransactionType) GetExpiry() uint32 {
	if x != nil && x.Expiry != nil {
		return *x.Expiry
	}
	return 0
}

func (x *TransactionType) GetOverwintered() bool {
	if x != nil && x.Overwintered != nil {
		return *x.Overwintered
	}
	return false
}

func (x *TransactionType) GetVersionGroupId() uint32 {
	if x != nil && x.VersionGroupId != nil {
		return *x.VersionGroupId
	}
	return 0
}

func (x *TransactionType) GetBranchId() uint32 {
	if x != nil && x.BranchId != nil {
		return *x.BranchId
	}
	return 0
}

//*
// Structure representing raw transaction
// @used_in RawTxAck
type RawTransactionType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payload []byte `protobuf:"bytes,1,req,name=payload" json:"payload,omitempty"`
}

func (x *RawTransactionType) Reset() {
	*x = RawTransactionType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawTransactionType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawTransactionType) ProtoMessage() {}

func (x *RawTransactionType) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawTransactionType.ProtoReflect.Descriptor instead.
func (*RawTransactionType) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{8}
}

func (x *RawTransactionType) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

//*
// Structure representing request details
// @used_in TxRequest
type TxRequestDetailsType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestIndex    *uint32 `protobuf:"varint,1,opt,name=request_index,json=requestIndex" json:"request_index,omitempty"`            // device expects TxAck message from the computer
	TxHash          []byte  `protobuf:"bytes,2,opt,name=tx_hash,json=txHash" json:"tx_hash,omitempty"`                               // tx_hash of requested transaction
	ExtraDataLen    *uint32 `protobuf:"varint,3,opt,name=extra_data_len,json=extraDataLen" json:"extra_data_len,omitempty"`          // length of requested extra data
	ExtraDataOffset *uint32 `protobuf:"varint,4,opt,name=extra_data_offset,json=extraDataOffset" json:"extra_data_offset,omitempty"` // offset of requested extra data
}

func (x *TxRequestDetailsType) Reset() {
	*x = TxRequestDetailsType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxRequestDetailsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxRequestDetailsType) ProtoMessage() {}

func (x *TxRequestDetailsType) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxRequestDetailsType.ProtoReflect.Descriptor instead.
func (*TxRequestDetailsType) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{9}
}

func (x *TxRequestDetailsType) GetRequestIndex() uint32 {
	if x != nil && x.RequestIndex != nil {
		return *x.RequestIndex
	}
	return 0
}

func (x *TxRequestDetailsType) GetTxHash() []byte {
	if x != nil {
		return x.TxHash
	}
	return nil
}

func (x *TxRequestDetailsType) GetExtraDataLen() uint32 {
	if x != nil && x.ExtraDataLen != nil {
		return *x.ExtraDataLen
	}
	return 0
}

func (x *TxRequestDetailsType) GetExtraDataOffset() uint32 {
	if x != nil && x.ExtraDataOffset != nil {
		return *x.ExtraDataOffset
	}
	return 0
}

//*
// Structure representing serialized data
// @used_in TxRequest
type TxRequestSerializedType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignatureIndex *uint32 `protobuf:"varint,1,opt,name=signature_index,json=signatureIndex" json:"signature_index,omitempty"` // 'signature' field contains signed input of this index
	Signature      []byte  `protobuf:"bytes,2,opt,name=signature" json:"signature,omitempty"`                                  // signature of the signature_index input
	SerializedTx   []byte  `protobuf:"bytes,3,opt,name=serialized_tx,json=serializedTx" json:"serialized_tx,omitempty"`        // part of serialized and signed transaction
}

func (x *TxRequestSerializedType) Reset() {
	*x = TxRequestSerializedType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxRequestSerializedType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxRequestSerializedType) ProtoMessage() {}

func (x *TxRequestSerializedType) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxRequestSerializedType.ProtoReflect.Descriptor instead.
func (*TxRequestSerializedType) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{10}
}

func (x *TxRequestSerializedType) GetSignatureIndex() uint32 {
	if x != nil && x.SignatureIndex != nil {
		return *x.SignatureIndex
	}
	return 0
}

func (x *TxRequestSerializedType) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *TxRequestSerializedType) GetSerializedTx() []byte {
	if x != nil {
		return x.SerializedTx
	}
	return nil
}

//*
// Structure representing identity data
// @used_in IdentityType
type IdentityType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Proto *string `protobuf:"bytes,1,opt,name=proto" json:"proto,omitempty"`        // proto part of URI
	User  *string `protobuf:"bytes,2,opt,name=user" json:"user,omitempty"`          // user part of URI
	Host  *string `protobuf:"bytes,3,opt,name=host" json:"host,omitempty"`          // host part of URI
	Port  *string `protobuf:"bytes,4,opt,name=port" json:"port,omitempty"`          // port part of URI
	Path  *string `protobuf:"bytes,5,opt,name=path" json:"path,omitempty"`          // path part of URI
	Index *uint32 `protobuf:"varint,6,opt,name=index,def=0" json:"index,omitempty"` // identity index
}

// Default values for IdentityType fields.
const (
	Default_IdentityType_Index = uint32(0)
)

func (x *IdentityType) Reset() {
	*x = IdentityType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdentityType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentityType) ProtoMessage() {}

func (x *IdentityType) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentityType.ProtoReflect.Descriptor instead.
func (*IdentityType) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{11}
}

func (x *IdentityType) GetProto() string {
	if x != nil && x.Proto != nil {
		return *x.Proto
	}
	return ""
}

func (x *IdentityType) GetUser() string {
	if x != nil && x.User != nil {
		return *x.User
	}
	return ""
}

func (x *IdentityType) GetHost() string {
	if x != nil && x.Host != nil {
		return *x.Host
	}
	return ""
}

func (x *IdentityType) GetPort() string {
	if x != nil && x.Port != nil {
		return *x.Port
	}
	return ""
}

func (x *IdentityType) GetPath() string {
	if x != nil && x.Path != nil {
		return *x.Path
	}
	return ""
}

func (x *IdentityType) GetIndex() uint32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return Default_IdentityType_Index
}

//*
// Structure representing policy data
// @used_in ApplyPolicy
type PolicyType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PolicyName *string `protobuf:"bytes,1,opt,name=policy_name,json=policyName" json:"policy_name,omitempty"` // name of policy
	Enabled    *bool   `protobuf:"varint,2,opt,name=enabled" json:"enabled,omitempty"`                        // status of policy
}

func (x *PolicyType) Reset() {
	*x = PolicyType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyType) ProtoMessage() {}

func (x *PolicyType) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyType.ProtoReflect.Descriptor instead.
func (*PolicyType) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{12}
}

func (x *PolicyType) GetPolicyName() string {
	if x != nil && x.PolicyName != nil {
		return *x.PolicyName
	}
	return ""
}

func (x *PolicyType) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

//*
// Structure representing exchange data
// @used_in TxOutputType
type ExchangeType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignedExchangeResponse *SignedExchangeResponse `protobuf:"bytes,1,opt,name=signed_exchange_response,json=signedExchangeResponse" json:"signed_exchange_response,omitempty"` // exchange response
	WithdrawalCoinName     *string                 `protobuf:"bytes,2,opt,name=withdrawal_coin_name,json=withdrawalCoinName,def=Bitcoin" json:"withdrawal_coin_name,omitempty"` // coin type of the received funds
	WithdrawalAddressN     []uint32                `protobuf:"varint,3,rep,name=withdrawal_address_n,json=withdrawalAddressN" json:"withdrawal_address_n,omitempty"`            // BIP-32 path for received funds
	ReturnAddressN         []uint32                `protobuf:"varint,4,rep,name=return_address_n,json=returnAddressN" json:"return_address_n,omitempty"`                        // BIP-32 path for return address, assumed to be the
	// same as the coin_name of the transaction
	WithdrawalScriptType *InputScriptType `protobuf:"varint,5,opt,name=withdrawal_script_type,json=withdrawalScriptType,enum=InputScriptType,def=0" json:"withdrawal_script_type,omitempty"`
	ReturnScriptType     *InputScriptType `protobuf:"varint,6,opt,name=return_script_type,json=returnScriptType,enum=InputScriptType,def=0" json:"return_script_type,omitempty"`
}

// Default values for ExchangeType fields.
const (
	Default_ExchangeType_WithdrawalCoinName   = string("Bitcoin")
	Default_ExchangeType_WithdrawalScriptType = InputScriptType_SPENDADDRESS
	Default_ExchangeType_ReturnScriptType     = InputScriptType_SPENDADDRESS
)

func (x *ExchangeType) Reset() {
	*x = ExchangeType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeType) ProtoMessage() {}

func (x *ExchangeType) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeType.ProtoReflect.Descriptor instead.
func (*ExchangeType) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{13}
}

func (x *ExchangeType) GetSignedExchangeResponse() *SignedExchangeResponse {
	if x != nil {
		return x.SignedExchangeResponse
	}
	return nil
}

func (x *ExchangeType) GetWithdrawalCoinName() string {
	if x != nil && x.WithdrawalCoinName != nil {
		return *x.WithdrawalCoinName
	}
	return Default_ExchangeType_WithdrawalCoinName
}

func (x *ExchangeType) GetWithdrawalAddressN() []uint32 {
	if x != nil {
		return x.WithdrawalAddressN
	}
	return nil
}

func (x *ExchangeType) GetReturnAddressN() []uint32 {
	if x != nil {
		return x.ReturnAddressN
	}
	return nil
}

func (x *ExchangeType) GetWithdrawalScriptType() InputScriptType {
	if x != nil && x.WithdrawalScriptType != nil {
		return *x.WithdrawalScriptType
	}
	return Default_ExchangeType_WithdrawalScriptType
}

func (x *ExchangeType) GetReturnScriptType() InputScriptType {
	if x != nil && x.ReturnScriptType != nil {
		return *x.ReturnScriptType
	}
	return Default_ExchangeType_ReturnScriptType
}

var file_types_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptor.EnumValueOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         50002,
		Name:          "wire_in",
		Tag:           "varint,50002,opt,name=wire_in",
		Filename:      "types.proto",
	},
	{
		ExtendedType:  (*descriptor.EnumValueOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         50003,
		Name:          "wire_out",
		Tag:           "varint,50003,opt,name=wire_out",
		Filename:      "types.proto",
	},
	{
		ExtendedType:  (*descriptor.EnumValueOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         50004,
		Name:          "wire_debug_in",
		Tag:           "varint,50004,opt,name=wire_debug_in",
		Filename:      "types.proto",
	},
	{
		ExtendedType:  (*descriptor.EnumValueOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         50005,
		Name:          "wire_debug_out",
		Tag:           "varint,50005,opt,name=wire_debug_out",
		Filename:      "types.proto",
	},
}

// Extension fields to descriptor.EnumValueOptions.
var (
	// optional bool wire_in = 50002;
	E_WireIn = &file_types_proto_extTypes[0] // message can be transmitted via wire from PC to TREZOR
	// optional bool wire_out = 50003;
	E_WireOut = &file_types_proto_extTypes[1] // message can be transmitted via wire from TREZOR to PC
	// optional bool wire_debug_in = 50004;
	E_WireDebugIn = &file_types_proto_extTypes[2] // message can be transmitted via debug wire from PC to TREZOR
	// optional bool wire_debug_out = 50005;
	E_WireDebugOut = &file_types_proto_extTypes[3] // message can be transmitted via debug wire from TREZOR to PC
)

var File_types_proto protoreflect.FileDescriptor

var file_types_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x0e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xc0, 0x01, 0x0a, 0x0a, 0x48, 0x44, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x05, 0x64,
	0x65, 0x70, 0x74, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72,
	0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65,
	0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f,
	0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64,
	0x4e, 0x75, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b,
	0x65, 0x79, 0x22, 0x4e, 0x0a, 0x0e, 0x48, 0x44, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x48, 0x44, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x4e, 0x22, 0xff, 0x05, 0x0a, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x69, 0x6e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x63, 0x75,
	0x74, 0x12, 0x24, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x66, 0x65,
	0x65, 0x5f, 0x6b, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x66,
	0x65, 0x65, 0x4b, 0x62, 0x12, 0x2d, 0x0a, 0x11, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x70, 0x32, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x3a,
	0x01, 0x35, 0x52, 0x0f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x50,
	0x32, 0x73, 0x68, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x62, 0x69, 0x70, 0x34, 0x34,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x10, 0x62, 0x69, 0x70, 0x34, 0x34, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6b, 0x69, 0x64, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6b, 0x69, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x27, 0x0a, 0x0a, 0x78, 0x70, 0x75, 0x62, 0x5f, 0x6d, 0x61, 0x67,
	0x69, 0x63, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x08, 0x37, 0x36, 0x30, 0x36, 0x37, 0x33,
	0x35, 0x38, 0x52, 0x09, 0x78, 0x70, 0x75, 0x62, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x65, 0x67, 0x77, 0x69, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73,
	0x65, 0x67, 0x77, 0x69, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x62,
	0x69, 0x70, 0x31, 0x34, 0x33, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x66, 0x6f, 0x72,
	0x63, 0x65, 0x42, 0x69, 0x70, 0x31, 0x34, 0x33, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x75, 0x72, 0x76,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x75,
	0x72, 0x76, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x61, 0x73, 0x68, 0x61,
	0x64, 0x64, 0x72, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x63, 0x61, 0x73, 0x68, 0x61, 0x64, 0x64, 0x72, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x12, 0x23, 0x0a, 0x0d, 0x62, 0x65, 0x63, 0x68, 0x33, 0x32, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x65, 0x63, 0x68, 0x33, 0x32, 0x50,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x63, 0x72, 0x65, 0x64, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x64, 0x65, 0x63, 0x72, 0x65, 0x64, 0x12, 0x33, 0x0a,
	0x16, 0x78, 0x70, 0x75, 0x62, 0x5f, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x5f, 0x73, 0x65, 0x67, 0x77,
	0x69, 0x74, 0x5f, 0x70, 0x32, 0x73, 0x68, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x78,
	0x70, 0x75, 0x62, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x53, 0x65, 0x67, 0x77, 0x69, 0x74, 0x50, 0x32,
	0x73, 0x68, 0x12, 0x37, 0x0a, 0x18, 0x78, 0x70, 0x75, 0x62, 0x5f, 0x6d, 0x61, 0x67, 0x69, 0x63,
	0x5f, 0x73, 0x65, 0x67, 0x77, 0x69, 0x74, 0x5f, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x78, 0x70, 0x75, 0x62, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x53,
	0x65, 0x67, 0x77, 0x69, 0x74, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6e,
	0x61, 0x6e, 0x6f, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6e, 0x61, 0x6e, 0x6f, 0x61, 0x64, 0x64, 0x72, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x22, 0x73, 0x0a, 0x18, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67,
	0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x29, 0x0a, 0x07, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x48, 0x44, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x61, 0x74, 0x68, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x07, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52,
	0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x0c, 0x0a, 0x01, 0x6d,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x6d, 0x22, 0x92, 0x03, 0x0a, 0x0b, 0x54, 0x78,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x4e, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x08, 0x70, 0x72, 0x65, 0x76, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x65, 0x76, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x73, 0x69, 0x67,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x53, 0x69,
	0x67, 0x12, 0x26, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x3a, 0x0a, 0x34, 0x32, 0x39, 0x34, 0x39, 0x36, 0x37, 0x32, 0x39, 0x35, 0x52,
	0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x3f, 0x0a, 0x0b, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10,
	0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x3a, 0x0c, 0x53, 0x50, 0x45, 0x4e, 0x44, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x52, 0x0a,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69,
	0x67, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x63,
	0x72, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x64, 0x65, 0x63, 0x72, 0x65, 0x64, 0x54, 0x72, 0x65, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x64, 0x65,
	0x63, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x64, 0x65, 0x63, 0x72, 0x65,
	0x64, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x8d,
	0x03, 0x0a, 0x0c, 0x54, 0x78, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x4e, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x02, 0x28, 0x04, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32,
	0x0a, 0x0b, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x02, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x52,
	0x65, 0x64, 0x65, 0x65, 0x6d, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x08, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x12, 0x24, 0x0a, 0x0e, 0x6f, 0x70, 0x5f,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0c, 0x6f, 0x70, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x35, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x64, 0x65,
	0x63, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x64, 0x65, 0x63, 0x72, 0x65,
	0x64, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x82,
	0x01, 0x0a, 0x0f, 0x54, 0x78, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x42, 0x69, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x04, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x5f, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x0c, 0x52, 0x0c, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12,
	0x32, 0x0a, 0x15, 0x64, 0x65, 0x63, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13,
	0x64, 0x65, 0x63, 0x72, 0x65, 0x64, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0xd2, 0x03, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x24, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x54, 0x78, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x0b, 0x62, 0x69, 0x6e, 0x5f, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x54,
	0x78, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x42, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a,
	0x62, 0x69, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x54, 0x78,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x43, 0x6e, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x43, 0x6e, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x24, 0x0a, 0x0e, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6c, 0x65,
	0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x65, 0x78, 0x74, 0x72, 0x61, 0x44, 0x61,
	0x74, 0x61, 0x4c, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x12, 0x22, 0x0a,
	0x0c, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65,
	0x64, 0x12, 0x28, 0x0a, 0x10, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x64, 0x22, 0x2e, 0x0a, 0x12, 0x52, 0x61, 0x77, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52,
	0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xa6, 0x01, 0x0a, 0x14, 0x54, 0x78, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x24, 0x0a, 0x0e, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6c, 0x65,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x65, 0x78, 0x74, 0x72, 0x61, 0x44, 0x61,
	0x74, 0x61, 0x4c, 0x65, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x22, 0x85, 0x01, 0x0a, 0x17, 0x54, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a,
	0x0f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x5f, 0x74, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x73, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x54, 0x78, 0x22, 0x8d, 0x01, 0x0a, 0x0c, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x12, 0x17, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x3a,
	0x01, 0x30, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x47, 0x0a, 0x0a, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x22, 0x9c, 0x03, 0x0a, 0x0c, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x51, 0x0a, 0x18, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x45, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x16,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x14, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x3a, 0x07, 0x42, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x52, 0x12, 0x77,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x43, 0x6f, 0x69, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x30, 0x0a, 0x14, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x12, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x4e, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0e, 0x72,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4e, 0x12, 0x54, 0x0a,
	0x16, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x5f, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x3a,
	0x0c, 0x53, 0x50, 0x45, 0x4e, 0x44, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x52, 0x14, 0x77,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x4c, 0x0a, 0x12, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x10, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x3a, 0x0c, 0x53, 0x50, 0x45, 0x4e, 0x44, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x52,
	0x10, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x2a, 0xe6, 0x02, 0x0a, 0x0b, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1d, 0x0a, 0x19, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x55, 0x6e, 0x65,
	0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x10, 0x01,
	0x12, 0x1a, 0x0a, 0x16, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x42, 0x75, 0x74, 0x74,
	0x6f, 0x6e, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13,
	0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x5f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64,
	0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x50, 0x69,
	0x6e, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x46,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x50, 0x69, 0x6e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x6c, 0x65, 0x64, 0x10, 0x06, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x5f, 0x50, 0x69, 0x6e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x07, 0x12, 0x1c, 0x0a,
	0x18, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x10, 0x08, 0x12, 0x11, 0x0a, 0x0d, 0x46,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x10, 0x09, 0x12, 0x1a,
	0x0a, 0x16, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x4e, 0x6f, 0x74, 0x45, 0x6e, 0x6f,
	0x75, 0x67, 0x68, 0x46, 0x75, 0x6e, 0x64, 0x73, 0x10, 0x0a, 0x12, 0x1a, 0x0a, 0x16, 0x46, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x10, 0x0b, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x5f, 0x50, 0x69, 0x6e, 0x4d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x10, 0x0c, 0x12,
	0x19, 0x0a, 0x15, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x46, 0x69, 0x72, 0x6d, 0x77,
	0x61, 0x72, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x63, 0x2a, 0x87, 0x01, 0x0a, 0x10, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x10, 0x0a, 0x0c, 0x50, 0x41, 0x59, 0x54, 0x4f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x10,
	0x00, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x41, 0x59, 0x54, 0x4f, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54,
	0x48, 0x41, 0x53, 0x48, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x41, 0x59, 0x54, 0x4f, 0x4d,
	0x55, 0x4c, 0x54, 0x49, 0x53, 0x49, 0x47, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x41, 0x59,
	0x54, 0x4f, 0x4f, 0x50, 0x52, 0x45, 0x54, 0x55, 0x52, 0x4e, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c,
	0x50, 0x41, 0x59, 0x54, 0x4f, 0x57, 0x49, 0x54, 0x4e, 0x45, 0x53, 0x53, 0x10, 0x04, 0x12, 0x14,
	0x0a, 0x10, 0x50, 0x41, 0x59, 0x54, 0x4f, 0x50, 0x32, 0x53, 0x48, 0x57, 0x49, 0x54, 0x4e, 0x45,
	0x53, 0x53, 0x10, 0x05, 0x2a, 0x6c, 0x0a, 0x0f, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x50, 0x45, 0x4e, 0x44,
	0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x50, 0x45,
	0x4e, 0x44, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x53, 0x49, 0x47, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08,
	0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x50,
	0x45, 0x4e, 0x44, 0x57, 0x49, 0x54, 0x4e, 0x45, 0x53, 0x53, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10,
	0x53, 0x50, 0x45, 0x4e, 0x44, 0x50, 0x32, 0x53, 0x48, 0x57, 0x49, 0x54, 0x4e, 0x45, 0x53, 0x53,
	0x10, 0x04, 0x2a, 0x55, 0x0a, 0x0b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x58, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x10, 0x00, 0x12, 0x0c,
	0x0a, 0x08, 0x54, 0x58, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06,
	0x54, 0x58, 0x4d, 0x45, 0x54, 0x41, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x58, 0x46, 0x49,
	0x4e, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x58, 0x45, 0x58,
	0x54, 0x52, 0x41, 0x44, 0x41, 0x54, 0x41, 0x10, 0x04, 0x2a, 0x46, 0x0a, 0x11, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09,
	0x0a, 0x05, 0x53, 0x50, 0x45, 0x4e, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x46, 0x45, 0x52, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x48, 0x41, 0x4e, 0x47,
	0x45, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10,
	0x03, 0x2a, 0xfa, 0x09, 0x0a, 0x11, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x75, 0x74, 0x74, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x10, 0x01,
	0x12, 0x22, 0x0a, 0x1e, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x46, 0x65, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x52, 0x65, 0x73, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x10, 0x04, 0x12, 0x1d, 0x0a, 0x19, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x57, 0x6f, 0x72,
	0x64, 0x10, 0x05, 0x12, 0x1c, 0x0a, 0x18, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x57, 0x69, 0x70, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x10,
	0x06, 0x12, 0x1d, 0x0a, 0x19, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x10, 0x07,
	0x12, 0x18, 0x0a, 0x14, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x53, 0x69, 0x67, 0x6e, 0x54, 0x78, 0x10, 0x08, 0x12, 0x1f, 0x0a, 0x1b, 0x42, 0x75,
	0x74, 0x74, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x46, 0x69, 0x72, 0x6d,
	0x77, 0x61, 0x72, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x10, 0x09, 0x12, 0x19, 0x0a, 0x15, 0x42,
	0x75, 0x74, 0x74, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x10, 0x0a, 0x12, 0x1f, 0x0a, 0x1b, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65,
	0x45, 0x72, 0x61, 0x73, 0x65, 0x10, 0x0b, 0x12, 0x2a, 0x0a, 0x26, 0x42, 0x75, 0x74, 0x74, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x10, 0x0c, 0x12, 0x2b, 0x0a, 0x27, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x54, 0x6f, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x61, 0x74, 0x68, 0x10, 0x0d,
	0x12, 0x1d, 0x0a, 0x19, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x10, 0x0e, 0x12,
	0x20, 0x0a, 0x1c, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x10,
	0x0f, 0x12, 0x22, 0x0a, 0x1e, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x73, 0x73, 0x70, 0x68, 0x72,
	0x61, 0x73, 0x65, 0x10, 0x10, 0x12, 0x23, 0x0a, 0x1f, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61,
	0x73, 0x73, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x10, 0x11, 0x12, 0x27, 0x0a, 0x23, 0x42, 0x75,
	0x74, 0x74, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x41, 0x6e, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x10, 0x12, 0x12, 0x20, 0x0a, 0x1c, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x10, 0x13, 0x12, 0x22, 0x0a, 0x1e, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x10, 0x14, 0x12, 0x28, 0x0a, 0x24, 0x42, 0x75, 0x74,
	0x74, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x49, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63,
	0x65, 0x10, 0x15, 0x12, 0x1e, 0x0a, 0x1a, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x10, 0x16, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x50, 0x69, 0x6e, 0x67, 0x10, 0x17, 0x12, 0x1b, 0x0a, 0x17, 0x42,
	0x75, 0x74, 0x74, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x50, 0x69, 0x6e, 0x10, 0x18, 0x12, 0x1b, 0x0a, 0x17, 0x42, 0x75, 0x74, 0x74,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x50, 0x69, 0x6e, 0x10, 0x19, 0x12, 0x1b, 0x0a, 0x17, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x69, 0x6e,
	0x10, 0x1a, 0x12, 0x1c, 0x0a, 0x18, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x6f, 0x70, 0x79, 0x10, 0x1b,
	0x12, 0x1d, 0x0a, 0x19, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x53, 0x69, 0x67, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x10, 0x1c, 0x12,
	0x1f, 0x0a, 0x1b, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x10, 0x1d,
	0x12, 0x1e, 0x0a, 0x1a, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x53, 0x69, 0x67, 0x6e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x10, 0x1e,
	0x12, 0x21, 0x0a, 0x1d, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x41, 0x75, 0x74, 0x6f, 0x4c, 0x6f, 0x63, 0x6b, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x4d,
	0x73, 0x10, 0x1f, 0x12, 0x1c, 0x0a, 0x18, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x55, 0x32, 0x46, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x10,
	0x20, 0x12, 0x22, 0x0a, 0x1e, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x45, 0x6f, 0x73, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x10, 0x21, 0x12, 0x22, 0x0a, 0x1e, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x45, 0x6f,
	0x73, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x10, 0x22, 0x12, 0x1d, 0x0a, 0x19, 0x42, 0x75, 0x74,
	0x74, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x4d, 0x65, 0x6d, 0x6f, 0x10, 0x23, 0x12, 0x20, 0x0a, 0x1c, 0x42, 0x75, 0x74, 0x74,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x57, 0x69, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x10, 0x24, 0x12, 0x20, 0x0a, 0x1c, 0x42, 0x75,
	0x74, 0x74, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x57, 0x69, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x10, 0x25, 0x12, 0x20, 0x0a, 0x1c,
	0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x57, 0x69, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x10, 0x26, 0x2a, 0x7f,
	0x0a, 0x14, 0x50, 0x69, 0x6e, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x50, 0x69, 0x6e, 0x4d, 0x61, 0x74,
	0x72, 0x69, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x50, 0x69, 0x6e, 0x4d,
	0x61, 0x74, 0x72, 0x69, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x5f, 0x4e, 0x65, 0x77, 0x46, 0x69, 0x72, 0x73, 0x74, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x50,
	0x69, 0x6e, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x5f, 0x4e, 0x65, 0x77, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x10, 0x03, 0x3a,
	0x3c, 0x0a, 0x07, 0x77, 0x69, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x12, 0x21, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6e, 0x75,
	0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xd2, 0x86,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x77, 0x69, 0x72, 0x65, 0x49, 0x6e, 0x3a, 0x3e, 0x0a,
	0x08, 0x77, 0x69, 0x72, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x12, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6e, 0x75, 0x6d,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xd3, 0x86, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x77, 0x69, 0x72, 0x65, 0x4f, 0x75, 0x74, 0x3a, 0x47, 0x0a,
	0x0d, 0x77, 0x69, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x69, 0x6e, 0x12, 0x21,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0xd4, 0x86, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x77, 0x69, 0x72, 0x65, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x49, 0x6e, 0x3a, 0x49, 0x0a, 0x0e, 0x77, 0x69, 0x72, 0x65, 0x5f, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x5f, 0x6f, 0x75, 0x74, 0x12, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xd5, 0x86, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x77, 0x69, 0x72, 0x65, 0x44, 0x65, 0x62, 0x75, 0x67, 0x4f, 0x75,
	0x74, 0x42, 0x29, 0x0a, 0x1a, 0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x65, 0x65, 0x70, 0x6b, 0x65, 0x79,
	0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x42,
	0x0b, 0x4b, 0x65, 0x65, 0x70, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65,
}

var (
	file_types_proto_rawDescOnce sync.Once
	file_types_proto_rawDescData = file_types_proto_rawDesc
)

func file_types_proto_rawDescGZIP() []byte {
	file_types_proto_rawDescOnce.Do(func() {
		file_types_proto_rawDescData = protoimpl.X.CompressGZIP(file_types_proto_rawDescData)
	})
	return file_types_proto_rawDescData
}

var file_types_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_types_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_types_proto_goTypes = []interface{}{
	(FailureType)(0),                    // 0: FailureType
	(OutputScriptType)(0),               // 1: OutputScriptType
	(InputScriptType)(0),                // 2: InputScriptType
	(RequestType)(0),                    // 3: RequestType
	(OutputAddressType)(0),              // 4: OutputAddressType
	(ButtonRequestType)(0),              // 5: ButtonRequestType
	(PinMatrixRequestType)(0),           // 6: PinMatrixRequestType
	(*HDNodeType)(nil),                  // 7: HDNodeType
	(*HDNodePathType)(nil),              // 8: HDNodePathType
	(*CoinType)(nil),                    // 9: CoinType
	(*MultisigRedeemScriptType)(nil),    // 10: MultisigRedeemScriptType
	(*TxInputType)(nil),                 // 11: TxInputType
	(*TxOutputType)(nil),                // 12: TxOutputType
	(*TxOutputBinType)(nil),             // 13: TxOutputBinType
	(*TransactionType)(nil),             // 14: TransactionType
	(*RawTransactionType)(nil),          // 15: RawTransactionType
	(*TxRequestDetailsType)(nil),        // 16: TxRequestDetailsType
	(*TxRequestSerializedType)(nil),     // 17: TxRequestSerializedType
	(*IdentityType)(nil),                // 18: IdentityType
	(*PolicyType)(nil),                  // 19: PolicyType
	(*ExchangeType)(nil),                // 20: ExchangeType
	(*SignedExchangeResponse)(nil),      // 21: SignedExchangeResponse
	(*descriptor.EnumValueOptions)(nil), // 22: google.protobuf.EnumValueOptions
}
var file_types_proto_depIdxs = []int32{
	7,  // 0: HDNodePathType.node:type_name -> HDNodeType
	8,  // 1: MultisigRedeemScriptType.pubkeys:type_name -> HDNodePathType
	2,  // 2: TxInputType.script_type:type_name -> InputScriptType
	10, // 3: TxInputType.multisig:type_name -> MultisigRedeemScriptType
	1,  // 4: TxOutputType.script_type:type_name -> OutputScriptType
	10, // 5: TxOutputType.multisig:type_name -> MultisigRedeemScriptType
	4,  // 6: TxOutputType.address_type:type_name -> OutputAddressType
	20, // 7: TxOutputType.exchange_type:type_name -> ExchangeType
	11, // 8: TransactionType.inputs:type_name -> TxInputType
	13, // 9: TransactionType.bin_outputs:type_name -> TxOutputBinType
	12, // 10: TransactionType.outputs:type_name -> TxOutputType
	21, // 11: ExchangeType.signed_exchange_response:type_name -> SignedExchangeResponse
	2,  // 12: ExchangeType.withdrawal_script_type:type_name -> InputScriptType
	2,  // 13: ExchangeType.return_script_type:type_name -> InputScriptType
	22, // 14: wire_in:extendee -> google.protobuf.EnumValueOptions
	22, // 15: wire_out:extendee -> google.protobuf.EnumValueOptions
	22, // 16: wire_debug_in:extendee -> google.protobuf.EnumValueOptions
	22, // 17: wire_debug_out:extendee -> google.protobuf.EnumValueOptions
	18, // [18:18] is the sub-list for method output_type
	18, // [18:18] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	14, // [14:18] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_types_proto_init() }
func file_types_proto_init() {
	if File_types_proto != nil {
		return
	}
	file_exchange_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_types_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HDNodeType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HDNodePathType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoinType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultisigRedeemScriptType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxInputType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxOutputType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxOutputBinType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RawTransactionType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxRequestDetailsType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxRequestSerializedType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdentityType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_types_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   14,
			NumExtensions: 4,
			NumServices:   0,
		},
		GoTypes:           file_types_proto_goTypes,
		DependencyIndexes: file_types_proto_depIdxs,
		EnumInfos:         file_types_proto_enumTypes,
		MessageInfos:      file_types_proto_msgTypes,
		ExtensionInfos:    file_types_proto_extTypes,
	}.Build()
	File_types_proto = out.File
	file_types_proto_rawDesc = nil
	file_types_proto_goTypes = nil
	file_types_proto_depIdxs = nil
}
